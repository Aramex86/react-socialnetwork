{"version":3,"sources":["components/HOC/WithAuthRedirect.jsx","components/Dialogs/DialogItem/DialogsItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["mapStateToPropsForRedidect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","src","img","alt","name","Message","profile","avatar","style","width","height","message","validate","values","errors","newAnswer","length","DialogsForm","formik","useFormik","initialValues","onSubmit","sendMessage","handleSubmit","maxLength","type","getFieldProps","color","textAlign","Button","variant","Dialogs","dialog","dialogs","map","index","key","messages","compose","messagesPage","profilePage","dispatch","addNewMessageActionCreator"],"mappings":"4KAIIA,EAA6B,SAACC,GAChC,MAAO,CAAEC,OAAQD,EAAME,KAAKD,SAmBfE,IAhBU,SAACC,GAAe,IACjCC,EADgC,uKAGlC,OAAKC,KAAKC,MAAMN,OAET,kBAACG,EAAcE,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAG,eAHV,GACNC,IAAML,WAYtC,OAJqCM,YAAQX,EAARW,CACnCL,K,6ECFWM,EAbI,SAACJ,GACnB,IAAIK,EAAO,YAAcL,EAAMM,GAE/B,OACC,yBAAKC,UAAU,sCACd,kBAAC,IAAD,CAASA,UAAU,yBAAyBN,GAAII,GAC/C,yBAAKG,IAAKR,EAAMS,IAAKC,IAAI,WACzB,6BAAMV,EAAMW,S,0BCMDC,EAbC,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,QAAWb,EAAW,2BAGpC,OACI,yBAAKO,UAAU,oBACXM,EAAQ,yBAAKL,IAAKR,EAAMS,IAAKC,IAAI,WAAW,yBAAKF,IAAKM,IAAQJ,IAAI,SAASK,MAAO,CAACC,MAAM,OAAOC,OAAO,UAD3G,KAEI,yBAAKV,UAAU,qCACVP,EAAMkB,W,0BCiBjBC,EAAW,SAACC,GAChB,IAAMC,EAAS,GAMf,OALKD,EAAOE,UAEDF,EAAOE,UAAUC,OAAS,KACnCF,EAAOC,UAAY,iCAFnBD,EAAOC,UAAY,6BAIdD,GAGHG,EAAc,SAACxB,GACnB,IAAMyB,EAASC,YAAU,CACvBC,cAAe,CACbL,UAAW,IAEbH,WACAS,SAAU,SAACR,GACTpB,EAAM6B,YAAYT,EAAOE,cAG7B,OACE,0BAAMM,SAAUH,EAAOK,cACrB,4CACEC,UAAU,KACVpB,KAAK,YACLL,GAAG,YACH0B,KAAK,YACDP,EAAOQ,cAAc,eAE1BR,EAAOJ,OAAOC,UAAY,yBAAKP,MAAO,CAACmB,MAAM,MAAMC,UAAU,SAASnB,MAAM,SAAUS,EAAOJ,OAAOC,WAAmB,KACxH,kBAACc,EAAA,EAAD,CAAQC,QAAQ,YAAYH,MAAM,UAAUF,KAAK,UAAjD,UA2CSM,EApCC,SAACtC,GACf,IAAKA,EAAMN,OAAQ,OAAO,kBAAC,IAAD,CAAUO,GAAG,WAEvC,IAAMsC,EAASvC,EAAMwC,QAAQC,KAAI,SAACF,EAAQG,GAAT,OAC/B,kBAAC,EAAD,CACEC,IAAKD,EACL/B,KAAM4B,EAAO5B,KACbL,GAAIiC,EAAOjC,GACXG,IAAK8B,EAAO9B,SAGVS,EAAUlB,EAAM4C,SAASH,KAAI,SAACvB,EAASwB,GAAV,OACjC,kBAAC,EAAD,CACEC,IAAKD,EACLxB,QAASA,EAAQA,QACjBZ,GAAIY,EAAQZ,GACZG,IAAKS,EAAQT,IACbI,QAASb,EAAMa,aAQnB,OACE,yBAAKN,UAAU,oBACb,yBAAKA,UAAU,4BAA4BgC,GAC3C,yBAAKhC,UAAU,6BACZW,EADH,IACY,kBAAC,EAAgBlB,M,yBChCpB6C,sBACX1C,aA3BiB,SAACV,GAClB,MAAM,CACF+C,QAAS/C,EAAMqD,aAAaN,QAC5BI,SAAUnD,EAAMqD,aAAaF,SAC7BtB,UAAW7B,EAAMqD,aAAaxB,UAC9BT,QAAQpB,EAAMsD,YAAYlC,YAMX,SAACmC,GACpB,MAAO,CAEHnB,YAAY,SAACP,GACT0B,EAASC,YAA2B3B,SAa5C1B,IAFWiD,CAGbP","file":"static/js/5.fca38405.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedidect = (state) => {\r\n  return { isAuth: state.auth.isAuth };\r\n};\r\n\r\nconst WithAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedidect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n\r\nexport default WithAuthRedirect;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n\tlet path = '/dialogs/' + props.id;\r\n\r\n\treturn (\r\n\t\t<div className=\"dialogs__wrapper-items active-item\">\r\n\t\t\t<NavLink className=\"dialogs__wrapper-links\" to={path}>\r\n\t\t\t\t<img src={props.img} alt=\"avatar\" />\r\n\t\t\t\t<div>{props.name}</div>\r\n\t\t\t</NavLink>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport avatar from '../../../assets/images/user.png';\r\n\r\nconst Message = ({profile,...props}) => {\r\n\r\n    \r\n    return (\r\n        <div className='message__wrapper'>\r\n           {profile?<img src={props.img} alt=\"avatar\"/>:<img src={avatar} alt=\"avatar\" style={{width:'7rem',height:'4rem'}}/>}  {/* <img src={props.img} alt=\"avatar\"/> */}\r\n            <div className=\"dialogs__wrapper-messages-message\">\r\n                {props.message}\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Redirect } from \"react-router-dom\";\r\n// import { Field, reduxForm } from \"redux-form\";\r\n// import { TextArea } from \"../common/FormControl/TextArea\";\r\n// import { maxLength, required } from \"../../utilies/Validation\";\r\nimport { useFormik } from \"formik\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n// const maxLength50 = maxLength(50);\r\n\r\n// const DialogsForm = (props) => {\r\n//   console.log(props);\r\n//   return (\r\n//     <form onSubmit={props.handleSubmit}>\r\n//       <Field\r\n//         name=\"newAnswer\"\r\n//         placeholder=\"your message here...\"\r\n//         component={TextArea}\r\n//         validate={[required,maxLength50]}\r\n//       ></Field>\r\n//       <button>SEND</button>\r\n//     </form>\r\n//   );\r\n// };\r\n// let DialogsFormRedux = reduxForm({ form: \"dialogsForm\" })(DialogsForm);\r\nconst validate = (values) => {\r\n  const errors = {};\r\n  if (!values.newAnswer) {\r\n    errors.newAnswer = \"The field can not be empty\";\r\n  } else if (values.newAnswer.length > 25) {\r\n    errors.newAnswer = \"Must be 25 characters or less\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst DialogsForm = (props) => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      newAnswer: \"\",\r\n    },\r\n    validate,\r\n    onSubmit: (values) => {\r\n      props.sendMessage(values.newAnswer);\r\n    },\r\n  });\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <textarea\r\n        maxLength=\"27\"\r\n        name=\"newAnswer\"\r\n        id=\"newAnswer\"\r\n        type=\"textarea\"\r\n        {...formik.getFieldProps(\"newAnswer\")}\r\n      ></textarea>\r\n      {formik.errors.newAnswer ? <div style={{color:'red',textAlign:'center',width:'100%'}}>{formik.errors.newAnswer}</div> : null}\r\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n        SEND\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst Dialogs = (props) => {\r\n  if (!props.isAuth) return <Redirect to=\"/login\" />;\r\n\r\n  const dialog = props.dialogs.map((dialog, index) => (\r\n    <DialogItem\r\n      key={index}\r\n      name={dialog.name}\r\n      id={dialog.id}\r\n      img={dialog.img}\r\n    />\r\n  ));\r\n  const message = props.messages.map((message, index) => (\r\n    <Message\r\n      key={index}\r\n      message={message.message}\r\n      id={message.id}\r\n      img={message.img}\r\n      profile={props.profile}\r\n    />\r\n  ));\r\n  // const addMessage = (values) => {\r\n  //   props.sendMessage(values.newAnswer);\r\n  //   //props.store.dispatch(addNewMessageActionCreator());\r\n  // };\r\n\r\n  return (\r\n    <div className=\"dialogs__wrapper\">\r\n      <div className=\"dialogs__wrapper-dialogs\">{dialog}</div>\r\n      <div className=\"dialogs__wrapper-messages\">\r\n        {message} <DialogsForm {...props} />\r\n        {/* <DialogsFormRedux onSubmit={addMessage} /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import {addNewMessageActionCreator} from '../Redux/messages-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport WithAuthRedirect from '../HOC/WithAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n//const addNewMessage = React.createRef();\r\n\r\n/* const DialogsContainer = (props) => {\r\n\r\n   \r\n    \r\n    return <SrotreContext.Consumer> \r\n        {(store) => {\r\n        let state = store.getState().messagesPage;\r\n\r\n        const addMessage =(e) =>{\r\n            store.dispatch(addNewMessageActionCreator());\r\n        }\r\n    \r\n        const onChangeMessage = (text) =>{\r\n            store.dispatch(updateMessageTextActionCreator(text));\r\n        }\r\n        \r\n    \r\n   return <Dialogs updateMessage={onChangeMessage}\r\n    sendMessage={addMessage}\r\n     messagesPage={state}/> \r\n    }\r\n}\r\n    </SrotreContext.Consumer>\r\n} */\r\n\r\nlet mapStateToProps =(state)=>{\r\n    return{\r\n        dialogs: state.messagesPage.dialogs,\r\n        messages: state.messagesPage.messages,\r\n        newAnswer: state.messagesPage.newAnswer,\r\n        profile:state.profilePage.profile\r\n        \r\n    }\r\n}\r\n\r\n\r\nlet mapDispachToProps =(dispatch)=>{\r\n    return {\r\n       \r\n        sendMessage:(newAnswer)=>{\r\n            dispatch(addNewMessageActionCreator(newAnswer));\r\n        }\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent= WithAuthRedirect(Dialogs);\r\n\r\n\r\n// const DialogsContainer = connect(mapStateToProps,mapDispachToProps)(AuthRedirectComponent)\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispachToProps),\r\n    WithAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}