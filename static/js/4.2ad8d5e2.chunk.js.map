{"version":3,"sources":["components/HOC/WithAuthRedirect.jsx","components/Dialogs/DialogItem/DialogsItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["mapStateToPropsForRedidect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","src","img","alt","name","Message","profile","console","log","photos","small","avatar","style","width","height","message","maxLength50","maxLength","DialogsFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","TextArea","validate","required","Dialogs","dialog","dialogs","map","index","key","messages","values","sendMessage","newAnswer","compose","messagesPage","profilePage","dispatch","addNewMessageActionCreator"],"mappings":"oLAIIA,EAA6B,SAACC,GAChC,MAAO,CAAEC,OAAQD,EAAME,KAAKD,SAmBfE,IAhBU,SAACC,GAAe,IACjCC,EADgC,iLAGlC,OAAKC,KAAKC,MAAMN,OAET,kBAACG,EAAcE,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAG,eAHV,GACNC,IAAML,WAYtC,OAJqCM,YAAQX,EAARW,CACnCL,K,6ECFWM,EAbI,SAACJ,GACnB,IAAIK,EAAO,YAAcL,EAAMM,GAE/B,OACC,yBAAKC,UAAU,sCACd,kBAAC,IAAD,CAASA,UAAU,yBAAyBN,GAAII,GAC/C,yBAAKG,IAAKR,EAAMS,IAAKC,IAAI,WACzB,6BAAMV,EAAMW,S,yBCMDC,EAbC,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,QAAWb,EAAW,2BAGpC,OADAc,QAAQC,IAAIf,GAER,yBAAKO,UAAU,oBACXM,EAAQ,yBAAKL,IAAKK,EAAQG,OAAOC,MAAOP,IAAI,WAAW,yBAAKF,IAAKU,IAAQR,IAAI,SAASS,MAAO,CAACC,MAAM,OAAOC,OAAO,UADtH,KAEI,yBAAKd,UAAU,qCACVP,EAAMsB,W,yCCFjBC,EAAcC,YAAU,IAe1BC,EAAmBC,YAAU,CAAEC,KAAM,eAAlBD,EAbH,SAAC1B,GACnB,OACE,0BAAM4B,SAAU5B,EAAM6B,cACpB,kBAACC,EAAA,EAAD,CACEnB,KAAK,YACLoB,YAAY,uBACZC,UAAWC,IACXC,SAAU,CAACC,IAASZ,KAEtB,4CA4CSa,EArCC,SAACpC,GACf,IAAKA,EAAMN,OAAQ,OAAO,kBAAC,IAAD,CAAUO,GAAG,WAGvC,IAAMoC,EAASrC,EAAMsC,QAAQC,KAAI,SAACF,EAAQG,GAAT,OAC/B,kBAAC,EAAD,CACEC,IAAKD,EACL7B,KAAM0B,EAAO1B,KACbL,GAAI+B,EAAO/B,GACXG,IAAK4B,EAAO5B,SAGVa,EAAUtB,EAAM0C,SAASH,KAAI,SAACjB,EAASkB,GAAV,OACjC,kBAAC,EAAD,CACEC,IAAKD,EACLlB,QAASA,EAAQA,QACjBhB,GAAIgB,EAAQhB,GACZG,IAAKa,EAAQb,IACbI,QAASb,EAAMa,aASnB,OACE,yBAAKN,UAAU,oBACb,yBAAKA,UAAU,4BAA4B8B,GAC3C,yBAAK9B,UAAU,6BACZe,EADH,IACY,kBAACG,EAAD,CAAkBG,SATf,SAACe,GAClB3C,EAAM4C,YAAYD,EAAOE,iB,wBCYdC,sBACX3C,aA3BiB,SAACV,GAClB,MAAM,CACF6C,QAAS7C,EAAMsD,aAAaT,QAC5BI,SAAUjD,EAAMsD,aAAaL,SAC7BG,UAAWpD,EAAMsD,aAAaF,UAC9BhC,QAAQpB,EAAMuD,YAAYnC,YAMX,SAACoC,GACpB,MAAO,CAEHL,YAAY,SAACC,GACTI,EAASC,YAA2BL,SAa5CjD,IAFWkD,CAGbV","file":"static/js/4.2ad8d5e2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedidect = (state) => {\r\n  return { isAuth: state.auth.isAuth };\r\n};\r\n\r\nconst WithAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedidect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n\r\nexport default WithAuthRedirect;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n\tlet path = '/dialogs/' + props.id;\r\n\r\n\treturn (\r\n\t\t<div className=\"dialogs__wrapper-items active-item\">\r\n\t\t\t<NavLink className=\"dialogs__wrapper-links\" to={path}>\r\n\t\t\t\t<img src={props.img} alt=\"avatar\" />\r\n\t\t\t\t<div>{props.name}</div>\r\n\t\t\t</NavLink>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport avatar from '../../../assets/images/user.png';\r\n\r\nconst Message = ({profile,...props}) => {\r\n\r\n    console.log(props)\r\n    return (\r\n        <div className='message__wrapper'>\r\n           {profile?<img src={profile.photos.small} alt=\"avatar\"/>:<img src={avatar} alt=\"avatar\" style={{width:'7rem',height:'4rem'}}/>}  {/* <img src={props.img} alt=\"avatar\"/> */}\r\n            <div className=\"dialogs__wrapper-messages-message\">\r\n                {props.message}\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {TextArea} from \"../common/FormControl/TextArea\";\r\nimport { maxLength,required } from \"../../utilies/Validation\";\r\n\r\nconst maxLength50 = maxLength(50);\r\n\r\nconst DialogsForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        name=\"newAnswer\"\r\n        placeholder=\"your message here...\"\r\n        component={TextArea}\r\n        validate={[required,maxLength50]}\r\n      ></Field>\r\n      <button>SEND</button>\r\n    </form>\r\n  );\r\n};\r\nlet DialogsFormRedux = reduxForm({ form: \"dialogsForm\" })(DialogsForm);\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  if (!props.isAuth) return <Redirect to=\"/login\" />;\r\n\r\n\r\n  const dialog = props.dialogs.map((dialog, index) => (\r\n    <DialogItem\r\n      key={index}\r\n      name={dialog.name}\r\n      id={dialog.id}\r\n      img={dialog.img}\r\n    />\r\n  ));\r\n  const message = props.messages.map((message, index) => (\r\n    <Message\r\n      key={index}\r\n      message={message.message}\r\n      id={message.id}\r\n      img={message.img}\r\n      profile={props.profile}\r\n    />\r\n  ));\r\n\r\n  const addMessage = (values) => {\r\n    props.sendMessage(values.newAnswer);\r\n    //props.store.dispatch(addNewMessageActionCreator());\r\n  };\r\n\r\n  return (\r\n    <div className=\"dialogs__wrapper\">\r\n      <div className=\"dialogs__wrapper-dialogs\">{dialog}</div>\r\n      <div className=\"dialogs__wrapper-messages\">\r\n        {message} <DialogsFormRedux onSubmit={addMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import {addNewMessageActionCreator} from '../Redux/messages-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport WithAuthRedirect from '../HOC/WithAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n//const addNewMessage = React.createRef();\r\n\r\n/* const DialogsContainer = (props) => {\r\n\r\n   \r\n    \r\n    return <SrotreContext.Consumer> \r\n        {(store) => {\r\n        let state = store.getState().messagesPage;\r\n\r\n        const addMessage =(e) =>{\r\n            store.dispatch(addNewMessageActionCreator());\r\n        }\r\n    \r\n        const onChangeMessage = (text) =>{\r\n            store.dispatch(updateMessageTextActionCreator(text));\r\n        }\r\n        \r\n    \r\n   return <Dialogs updateMessage={onChangeMessage}\r\n    sendMessage={addMessage}\r\n     messagesPage={state}/> \r\n    }\r\n}\r\n    </SrotreContext.Consumer>\r\n} */\r\n\r\nlet mapStateToProps =(state)=>{\r\n    return{\r\n        dialogs: state.messagesPage.dialogs,\r\n        messages: state.messagesPage.messages,\r\n        newAnswer: state.messagesPage.newAnswer,\r\n        profile:state.profilePage.profile\r\n        \r\n    }\r\n}\r\n\r\n\r\nlet mapDispachToProps =(dispatch)=>{\r\n    return {\r\n       \r\n        sendMessage:(newAnswer)=>{\r\n            dispatch(addNewMessageActionCreator(newAnswer));\r\n        }\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent= WithAuthRedirect(Dialogs);\r\n\r\n\r\n// const DialogsContainer = connect(mapStateToProps,mapDispachToProps)(AuthRedirectComponent)\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispachToProps),\r\n    WithAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}